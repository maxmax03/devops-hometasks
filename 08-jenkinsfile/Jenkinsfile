pipeline {
    agent any
    
    tools{
        go 'Go 1.16'
    }
    environment {
        STAGE_IP='192.168.33.11'
        NEXUS_URL='192.168.33.12'
        PROD_IP='192.168.33.13'
        NEXUS_REPO='word-cloud-builds'
        BRANCH='pipeline'
    }
    options {
        timestamps()
    }
    
    stages{
        stage('Get source code'){
            steps{
                git 'https://github.com/maxmax03/word-cloud-generator.git'
            }
        }
        stage('Pre-build tests') {
            steps {
                sh '''cd /var/lib/jenkins/workspace/${JOB_NAME}
                   make lint
                   make test'''
            }
        }
        stage('Build job'){
            steps{
                sh '''export GOPATH=$WORKSPACE/go
                export PATH="$PATH:$(go env GOPATH)/bin"
                go get github.com/tools/godep
                go get github.com/smartystreets/goconvey
                go get github.com/GeertJohan/go.rice/rice
                go get github.com/wickett/word-cloud-generator/wordyapi
                go get github.com/gorilla/mux
                sed -i "s/1.DEVELOPMENT/1.$BUILD_NUMBER/g" static/version
                GOOS=linux GOARCH=amd64 go build -o ./artifacts/word-cloud-generator -v 
                gzip -f artifacts/word-cloud-generator
                ls -l artifacts/
                date'''
            }
        }
        stage('Upload artifacts'){
            steps {
                nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: '192.168.33.12:8081',
                    groupId: "pipeline",
                    version: '1.$BUILD_NUMBER',
                    repository: 'word-cloud-builds',
                    credentialsId: 'uploadertest',
                    artifacts: [
                        [artifactId: 'word-cloud-generator',
                        classifier: '',
                        file: 'artifacts/word-cloud-generator.gz',
                        type: 'gz' ]
                    ]
                )
            }
        }
        
        stage('Deploy on Staging'){
            environment{
                        SSH_CREDS = credentials('vagranttest')
            }
            steps{
                withCredentials([usernamePassword(credentialsId: 'uploadertest', usernameVariable: 'UPLOAD_USER', passwordVariable: 'UPLOAD_PASS')]) {
                    sh '''
                    sshpass -p ${SSH_CREDS_PSW} ssh ${SSH_CREDS_USR}@${STAGE_IP} -o StrictHostKeyChecking=no "sudo systemctl start wordcloud"
                    sshpass -p ${SSH_CREDS_PSW} ssh ${SSH_CREDS_USR}@${STAGE_IP} "curl -X GET http://192.168.33.12:8081/repository/word-cloud-builds/1/word-cloud-generator/1.$BUILD_NUMBER/word-cloud-generator-1.$BUILD_NUMBER.gz --user ${UPLOAD_USER}:${UPLOAD_PASS}  -o /opt/wordcloud/word-cloud-generator.gz"
                    sshpass -p ${SSH_CREDS_PSW} ssh ${SSH_CREDS_USR}@${STAGE_IP} gunzip -f /opt/wordcloud/word-cloud-generator.gz
                    sshpass -p ${SSH_CREDS_PSW} ssh ${SSH_CREDS_USR}@${STAGE_IP} chmod +x /opt/wordcloud/word-cloud-generator
                    sshpass -p ${SSH_CREDS_PSW} ssh ${SSH_CREDS_USR}@${STAGE_IP} sudo systemctl start wordcloud
                    '''
                }
            }
        }
                stage('Parallel testing') {
                parallel {
                    stage('Parallel testing - Stage 1'){
                        steps{
                            sh '''res=`curl -s -H "Content-Type: application/json" -d '{"text":"ths is a really really really important thing this is"}' http://${STAGE_IP}:8888/version | jq '. | length'`
                                  if [ "1" != "$res" ]; then
                                    exit 99
                                  fi
                              
                                  res=`curl -s -H "Content-Type: application/json" -d '{"text":"ths is a really really really important thing this is"}' http://${STAGE_IP}:8888/api | jq '. | length'`
                                  if [ "7" != "$res" ]; then
                                    exit 99
                                  fi'''
                        }
                    }
                    stage('Parallel testing - Stage 2'){
                        steps{
                             sh '''res=`curl -s -H "Content-Type: application/json" -d '{"text":"ths is a really really really important thing this is"}' http://${STAGE_IP}:8888/version | jq '. | length'`
                                  if [ "1" != "$res" ]; then
                                    exit 99
                                  fi
                                          
                                  res=`curl -s -H "Content-Type: application/json" -d '{"text":"ths is a really really really important thing this is"}' http://${STAGE_IP}:8888/api | jq '. | length'`
                                  if [ "7" != "$res" ]; then
                                    exit 99
                                  fi'''
                        }
                    }
            }
        }
        stage('Deploy on PROD'){
            environment{
                        SSH_CREDS = credentials('vagranttest')
            }
            steps{
                withCredentials([usernamePassword(credentialsId: 'uploadertest', usernameVariable: 'UPLOAD_USER', passwordVariable: 'UPLOAD_PASS')]) {
                    sh '''
                    sshpass -p ${SSH_CREDS_PSW} ssh ${SSH_CREDS_USR}@${PROD_IP} -o StrictHostKeyChecking=no "sudo systemctl start wordcloud"
                    sshpass -p ${SSH_CREDS_PSW} ssh ${SSH_CREDS_USR}@${PROD_IP} "curl -X GET http://192.168.33.12:8081/repository/word-cloud-builds/1/word-cloud-generator/1.$BUILD_NUMBER/word-cloud-generator-1.$BUILD_NUMBER.gz --user ${UPLOAD_USER}:${UPLOAD_PASS} -o /opt/wordcloud/word-cloud-generator.gz"
                    sshpass -p ${SSH_CREDS_PSW} ssh ${SSH_CREDS_USR}@${PROD_IP} gunzip -f /opt/wordcloud/word-cloud-generator.gz
                    sshpass -p ${SSH_CREDS_PSW} ssh ${SSH_CREDS_USR}@${PROD_IP} chmod +x /opt/wordcloud/word-cloud-generator
                    sshpass -p ${SSH_CREDS_PSW} ssh ${SSH_CREDS_USR}@${PROD_IP} sudo systemctl start wordcloud
                    '''
                }
            }
        }
    }
}
    
